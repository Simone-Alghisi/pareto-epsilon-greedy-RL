install.packages("tidyverse")
if(!require(tidyverse)) {
install.packages("tidyverse")
library(tidyverse)
}
ggplot(data=my_df,aes(x=class))+geom_bar()
data("midwest", package = "ggplot2")
(data("midwest", package = "ggplot2"))
(data("midwest", package = "ggplot2"))
midwest
ggplot(midwest, aes(x = area, y = poptotal))
ggplot(midwest, aes(x = area, y = poptotal)) + geom_point()
data("midwest", package = "ggplot2")
midwest
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3)
gg
?labs
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) + labs(x=0.1,y=10000)
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) + labs(xlim=0.1,ylim=10000)
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) + lims(x=c(0.0,0.1),y=c(0,100000))
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=popdensity) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=population) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=midwest$popdensity) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state,size=popdensity)) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state,size=popdensity)) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = letters[1:11])
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state,size=popdensity)) + lims(x=c(0,0.1),y=c(0,1000000))
gg
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = letters[1:11])
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = letters[1:11])
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change Axis Texts
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change Axis Texts
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change Axis Texts
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
?theme
?element_text
an example:
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=FALSE) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")
# Modify theme components -------------------------------------------
gg + theme(plot.title=element_text(size=20,
face="bold",
family="Roboto",
color="tomato",
hjust=0.5,
lineheight=1.2),
plot.subtitle=element_text(size=15,
family="Roboto",
face="bold",
hjust=0.5),
plot.caption=element_text(size=15),
axis.title.x=element_text(vjust=0,
size=15),
axis.title.y=element_text(size=15),
axis.text.x=element_text(size=10,
angle = 30,
vjust=.5),
axis.text.y=element_text(size=10))
gg <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point(aes(col = state,
size = popdensity)) + geom_smooth(method = "loess", se = F) +
xlim(c(0, 0.1)) + ylim(c(0, 500000)) + labs(title = "Area Vs Population",
y = "Population", x = "Area", caption = "Source: midwest")
gg + scale_color_manual(name = "State", labels = c("Illinois",
"Indiana", "Michigan", "Ohio", "Wisconsin"), values = c(IL = "blue",
IN = "red", MI = "green", OH = "brown", WI = "orange"))
gg + guides(colour = guide_legend(order = 1), size = guide_legend(order = 2))
gg + guides(colour = guide_legend(order = 2), size = guide_legend(order = 1))
gg + theme(legend.title = element_text(size = 12, color = "firebrick"),
legend.text = element_text(size = 10), legend.key = element_rect(fill = "springgreen")) +
guides(colour = guide_legend(override.aes = list(size = 2,
stroke = 1.5)))
midwest_sub <- midwest %>%
dplyr::filter(poptotal > 300000)
midwest_sub$large_county <- ifelse(midwest_sub$poptotal > 300000,
midwest_sub$county, "")
gg <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point(aes(col = state,
size = popdensity)) + geom_smooth(method = "loess", se = F) +
xlim(c(0, 0.1)) + ylim(c(0, 500000)) + labs(title = "Area Vs Population",
y = "Population", x = "Area", caption = "Source: midwest")
# Plot text and label
# ------------------------------------------------------
# here we use midwest_sub as the data source
gg + geom_text(aes(label = large_county), size = 2, data = midwest_sub) +
labs(subtitle = "With ggplot2::geom_text") + theme(legend.position = "None")  # text
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3)  +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
gg + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
gg + geom_label(aes(label = large_county), size = 2, data = midwest_sub,
alpha = 0.25) + labs(subtitle = "With ggplot2::geom_label") +
theme(legend.position = "None")
gg <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point(aes(col = state,
size = popdensity)) + geom_smooth(method = "loess", se = F) +
xlim(c(0, 0.1)) + ylim(c(0, 500000)) + labs(title = "Area Vs Population",
y = "Population", x = "Area", caption = "Source: midwest")
# Plot text and label
# ------------------------------------------------------
# here we use midwest_sub as the data source
gg + geom_text(aes(label = large_county), size = 2, data = midwest_sub) +
labs(subtitle = "With ggplot2::geom_text") + theme(legend.position = "None")  # text
gg + geom_label(aes(label = large_county), size = 2, data = midwest_sub,
alpha = 0.25) + labs(subtitle = "With ggplot2::geom_label") +
theme(legend.position = "None")
library(ggrepel)
gg + geom_label_repel(aes(label = large_county), size = 2, data = midwest_sub) +
labs(subtitle = "With ggrepel::geom_label_repel") + theme(legend.position = "None")  # label
gg <- ggplot(midwest, aes(x = area, y = poptotal)) + geom_point(aes(col = state,
size = popdensity)) + geom_smooth(method = "loess", se = F) +
xlim(c(0, 0.1)) + ylim(c(0, 500000)) + labs(title = "Area Vs Population",
y = "Population", x = "Area", caption = "Source: midwest")
# -------------------------------------
library(grid)
my_text <- "This text is at x=0.7 and y=0.8!"
gg + annotation_custom(grob = grid.text(my_text, x = 0.6, y = 0.8,
gp = gpar(col = "firebrick", fontsize = 14, fontface = "bold")))
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) + lims(x=c(0.0,0.1),y=c(0,1000000))
gg
library(tidyverse)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto[,-1]
runs.random <- runs.random[,-1]
runs.pareto <- runs.pareto %>% mutate( Mean = rowMeans(.))
View(runs.pareto)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto[,-1]
runs.random <- runs.random[,-1]
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(.))
runs.random <- runs.random %>% mutate( mean_random = rowMeans(.))
View(runs.pareto)
export <- bind_cols(runs.random,runs.pareto)
?rowMeans
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(-contains("episode"))))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
runs.random <- runs.random %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
export <- bind_cols(runs.random,runs.pareto)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
runs.random <- runs.random %>% mutate( mean_random = rowMeans(select(.,-contains("episode"))))
export <- bind_cols(runs.random,runs.pareto)
View(export)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/wandb_export_2022-08-22T22 48 35.608+02 00.csv")
runs.pareto <- read.csv("data/wandb_export_2022-08-22T22 48 57.821+02 00.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX") | contains("episode"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX") | contains("episode"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
runs.random <- runs.random %>% mutate( mean_random = rowMeans(select(.,-contains("episode"))))
export <- bind_cols(runs.random,runs.pareto)
View(export)
export$episode...11
ggplot(data=export,aes(x=episode...11)) + geom_line(aes(y=mean_pareto)) + geom_line(aes(y=mean_random))
ggplot(data=export,aes(x=episode...11)) + geom_line(aes(y=mean_pareto,col="red")) + geom_line(aes(y=mean_random,col="blue"))
library(tidyverse)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/random_run.csv")
runs.pareto <- read.csv("data/pareto_run.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX") | contains("episode"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX") | contains("episode"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
runs.random <- runs.random %>% mutate( mean_random = rowMeans(select(.,-contains("episode"))))
export <- bind_cols(runs.random,runs.pareto)
ggplot(data=export,aes(x=episode...11)) + geom_line(aes(y=mean_pareto,col="red")) + geom_line(aes(y=mean_random,col="blue"))
library(tidyverse)
dir <- "/home/metrobobbi/Documenti/uni/DS/Projects/pareto-epsilon-greedy-RL/analysis"
setwd(dir)
runs.random <- read.csv("data/random_run.csv")
runs.pareto <- read.csv("data/pareto_run.csv")
runs.pareto <- runs.pareto %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX") | contains("episode"))
runs.random <- runs.random %>% select(contains("ep_reward") & -contains("MIN") & -contains("MAX"))
runs.pareto <- runs.pareto %>% mutate( mean_pareto = rowMeans(select(.,-contains("episode"))))
runs.random <- runs.random %>% mutate( mean_random = rowMeans(select(.,-contains("episode"))))
export <- bind_cols(runs.random,runs.pareto)
ggplot(data=export,aes(x=episode...11)) + geom_line(aes(y=mean_pareto,col="red")) + geom_line(aes(y=mean_random,col="blue"))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto,col="red")) + geom_line(aes(y=mean_random,col="blue"))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto,colour="red")) + geom_line(aes(y=mean_random,colour="blue"))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto,colour=1)) + geom_line(aes(y=mean_random,colour=2))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto,colour=1)) + geom_line(aes(y=mean_random,colour=2)) + coord_cartesian(xlim=c(0,500))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto),colour=1) + geom_line(aes(y=mean_random),colour=2) + coord_cartesian(xlim=c(0,500))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto),colour="blue") + geom_line(aes(y=mean_random),colour="red") + coord_cartesian(xlim=c(0,500))
ggplot(data=export,aes(x=episode)) + geom_line(aes(y=mean_pareto),colour="blue") + geom_line(aes(y=mean_random),colour="red") + coord_cartesian(xlim=c(0,500)) + geom_smooth(method = "loess")
?tilde
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue") +
geom_line(aes(y=mean_random),colour="red") +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue") +
geom_smooth(aes(y=mean_random),method = "loess",color="red")
ggplot(data=export,aes(x=episode)) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue") +
geom_smooth(aes(y=mean_random),method = "loess",color="red")
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue") +
geom_smooth(aes(y=mean_random),method = "loess",color="red")
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue") +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme("minimal")
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue") +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme_minimal()
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.4) +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme_minimal()
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0) +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme_minimal()
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.01) +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme_minimal()
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=1) +
geom_smooth(aes(y=mean_random),method = "loess",color="red") + theme_minimal()
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.2) +
geom_smooth(aes(y=mean_random),method = "loess",color="red",span=0.2) + theme_minimal()
ks.test(export$mean_pareto,export$mean_random,alternative = "l")
?ks.test
ks.test(export$mean_pareto,export$mean_random,alternative = "g")
ks.test(export$mean_pareto,export$mean_random,alternative = "l")
ecdf(export$mean_pareto,export$mean_random)
ecdf(export$mean_pareto)
ks.test(export$mean_pareto,export$mean_random,alternative = "l")
?ks.test
ks.test(export$mean_pareto,export$mean_random)
# are mean pareto and mean random sampled from the same distribution?
ks.test(export$mean_pareto,export$mean_random,alternative = "l")
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.2) +
geom_smooth(aes(y=mean_random),method = "loess",color="red",span=0.2) + theme_minimal() + legend()
?legend
?labs
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.2) +
geom_smooth(aes(y=mean_random),method = "loess",color="red",span=0.2) + theme_minimal() + labs(x="Episode",y="Episode Reward")
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="blue",alpha=0.2) +
geom_line(aes(y=mean_random),colour="red",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="blue",span=0.2) +
geom_smooth(aes(y=mean_random),method = "loess",color="red",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_fill_manual(values = c("blue", "red"))
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto),colour="pareto",alpha=0.2) +
geom_line(aes(y=mean_random),colour="random",alpha=0.2) +
geom_smooth(aes(y=mean_pareto),method = "loess",color="pareto",span=0.2) +
geom_smooth(aes(y=mean_random),method = "loess",color="random",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_color_manual(name = c("Pareto", "Random"),
values = c("pareto" = "blue", "random" = "red"))
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto,color="pareto"),alpha=0.2) +
geom_line(aes(y=mean_random,colour="random"),alpha=0.2) +
geom_smooth(aes(y=mean_pareto,colour="pareto"),method = "loess",span=0.2) +
geom_smooth(aes(y=mean_random,colour="random"),method = "loess",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_color_manual(name = c("Pareto", "Random"),
values = c("pareto" = "blue", "random" = "red"))
?labs
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto,color="pareto"),alpha=0.2) +
geom_line(aes(y=mean_random,colour="random"),alpha=0.2) +
geom_smooth(aes(y=mean_pareto,colour="pareto"),method = "loess",span=0.2) +
geom_smooth(aes(y=mean_random,colour="random"),method = "loess",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_color_manual(name = c("Pareto", "Random"),
values = c("pareto" = "blue", "random" = "red"))+
guides(fill=guide_legend(title="SIUM"))
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto,color="pareto"),alpha=0.2) +
geom_line(aes(y=mean_random,colour="random"),alpha=0.2) +
geom_smooth(aes(y=mean_pareto,colour="pareto"),method = "loess",span=0.2) +
geom_smooth(aes(y=mean_random,colour="random"),method = "loess",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_color_manual(name = c("Pareto", "Random"),
values = c("pareto" = "blue", "random" = "red"))+
guides(col=guide_legend(title="SIUM"))
ggplot(data=export,aes(x=episode)) +
geom_line(aes(y=mean_pareto,color="pareto"),alpha=0.2) +
geom_line(aes(y=mean_random,colour="random"),alpha=0.2) +
geom_smooth(aes(y=mean_pareto,colour="pareto"),method = "loess",span=0.2) +
geom_smooth(aes(y=mean_random,colour="random"),method = "loess",span=0.2) +
theme_minimal() +
labs(x="Episode",y="Episode Reward") +
scale_color_manual(names = c("Pareto", "Random"),
values = c("pareto" = "blue", "random" = "red"))+
guides(col=guide_legend(title="SIUM"))
